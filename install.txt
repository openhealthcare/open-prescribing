Server basics:

sudo apt-get install emacs tree git nginx build-essential htop

Download data:

I've put these in /var/data but you know, whatever, just substitute in your own as appropriate

fetch.sh for prescriptions
fetch.sh for practices
www.theinformationlab.co.uk/2011/03/14/hopefully-the-last-word-on-uk-postcode-mapping-in-tableau/ for postcodes
ccgs.kml from fusion table

Install database:

sudo apt-get install binutils libproj-dev gdal-bin
sudo apt-get install postgresql-9.1-postgis
wget https://docs.djangoproject.com/en/dev/_downloads/create_template_postgis-debian.sh
sudo -u postgres sh create_template_postgis-debian.sh
sudo -u postgres createuser --createdb ohc
(as user ohc from here on)
createdb -T template_postgis scrip

Check it out: 

git clone http://github.com/symroe/nhs-prescriptions

Python dependencies:

sudo apt-get install libpq-dev libgdal1-dev python-dev
sudo apt-get install virtualenvwrapper
mkvirtualenv -a /usr/local/ohc/scrip/nhs-prescriptions
pip install -r requirements.txt

Configure it:

Create a local_settings.py under nhs with your database name in

python manage.py syncdb
python manage.py migrate ccgs
python manage.py migrate practices
python manage.py migrate

Import data:

python manage.py mapit_import_postcodes --header --strip /var/data/postcodes/postcodes.csv
find /var/data/practices/*.CSV -print0 | while read -d $'\0' file; do python manage.py import_practices --filename="$file"; done
python manage.py load_ccgs < /var/data/ccgs/ccg.kml.csv
python manage.py convert_practice_datamodel
python manage.py bind_practices

******* MOARE STUFFS HERE !

Set up API caching:

curl http://repo.varnish-cache.org/debian/GPG-key.txt | sudo apt-key add -
echo "deb http://repo.varnish-cache.org/ubuntu/ precise varnish-3.0" | sudo tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get install varnish

Webserver configs: 

Nginx points /api/v1 at varnish, which looks for Gunicorn
             everything else to Gunicorn

Make sure to set proxy pass headers for Nginx: 

    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 

Make sure that USE_X_FORWARDED_HOST = True is set in local_settings.py
